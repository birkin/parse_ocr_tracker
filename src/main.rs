mod helper;
pub mod logger; // enables the log_debug!() and log_info!() macros

use clap::{arg, Command};

/*  -----------------------------------------------------------------
    Includes the file generated by the build.rs script, which looks like:
        pub const GIT_COMMIT: &str = "c5f7034f79bc3d49c1a9fb81c7cac6a8a778c5c3";
    Purpose: to enable `parse_ocr_tracker --version` to show the git commit hash.
    -----------------------------------------------------------------
*/
include!(concat!(env!("OUT_DIR"), "/git_commit.rs")); // OUT_DIR is set by cargo; is the target dir; and is only available during build process

/*  -----------------------------------------------------------------
    Main manager function.
    -----------------------------------------------------------------
*/
fn main() {
    // init logger --------------------------------------------------
    logger::init_logger().unwrap();

    // get args -----------------------------------------------------
    let matches = Command::new("parse_ocr_tracker")
        .version(GIT_COMMIT)
        .about("Walks source_dir_path and lists all json files.")
        .arg(arg!(-s --source_dir_path <VALUE>).required(true))
        .arg(arg!(-o --output_dir_path <VALUE>).required(true))
        .get_matches();

    // get source_dir -----------------------------------------------
    let source_dir_temp_ref: &String = matches
        .get_one::<String>("source_dir_path")
        .expect("Failed to get required 'source_dir_path' argument.");
    let source_dir: &str = source_dir_temp_ref.as_str(); // or... let source_dir: String = source_dir_temp_ref.to_string();
                                                         // log_debug!("source-arg: {:?}", source_dir);
    log_info!("source-arg: {:?}", source_dir);

    // get output_dir -----------------------------------------------
    let output_dir_temp_ref: &String = matches
        .get_one::<String>("output_dir_path")
        .expect("Failed to get required 'output_dir_path' argument.");
    let output_dir: &str = output_dir_temp_ref.as_str();
    log_info!("output-arg: {:?}", output_dir);

    // get paths ----------------------------------------------------
    // let (ocr_paths, ingest_paths, _error_paths, _other_paths) = find_json_files(source_dir);
    let (ocr_paths, ingest_paths, _error_paths, _other_paths) = helper::find_json_files(source_dir);

    log_debug!("ocr_paths...");
    for path in &ocr_paths {
        log_debug!("{}", path.display());
    }
    log_debug!("error_paths...");
    for path in &_error_paths {
        log_debug!("{}", path.display());
    }

    // make a map of id-to-pid --------------------------------------
    // let id_to_pid_map = make_id_to_pid_map(ingest_paths);
    let id_to_pid_map = helper::make_id_to_pid_map(ingest_paths);

    // process files ------------------------------------------------
    match helper::process_files(ocr_paths, &id_to_pid_map) {
        Ok(data_vector) => {
            if let Err(e) = helper::save_to_csv(&data_vector, output_dir) {
                log_info!("Error saving to CSV: {}", e);
            }
        }
        Err(e) => log_info!("Error processing files: {}", e),
    }
}

// let zz: () = the_var;
//
